// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "kbar.proto" (package "kbar", syntax proto3)
// tslint:disable
//
// file: kbar.proto
// author: Jacob Xie
// date: 2023/09/02 18:49:57 Saturday
// brief:
//
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message kbar.SymbolList
 */
export interface SymbolList {
    /**
     * @generated from protobuf field: repeated string data = 1;
     */
    data: string[];
}
/**
 * @generated from protobuf message kbar.KBarRequest
 */
export interface KBarRequest {
    /**
     * @generated from protobuf field: string symbol = 1;
     */
    symbol: string;
}
/**
 * @generated from protobuf message kbar.KBarRow
 */
export interface KBarRow {
    /**
     * @generated from protobuf field: string symbol = 1;
     */
    symbol: string;
    /**
     * @generated from protobuf field: string trade_date = 2;
     */
    tradeDate: string;
    /**
     * @generated from protobuf field: optional double pre_close = 3;
     */
    preClose?: number;
    /**
     * @generated from protobuf field: optional double open_price = 4;
     */
    openPrice?: number;
    /**
     * @generated from protobuf field: optional double hight_price = 5;
     */
    hightPrice?: number;
    /**
     * @generated from protobuf field: optional double low_price = 6;
     */
    lowPrice?: number;
    /**
     * @generated from protobuf field: optional double close_price = 7;
     */
    closePrice?: number;
    /**
     * @generated from protobuf field: optional double change = 8;
     */
    change?: number;
    /**
     * @generated from protobuf field: optional double pct_change = 9;
     */
    pctChange?: number;
    /**
     * @generated from protobuf field: optional double volume = 10;
     */
    volume?: number;
    /**
     * @generated from protobuf field: optional double amount = 11;
     */
    amount?: number;
}
/**
 * @generated from protobuf message kbar.KBarResponse
 */
export interface KBarResponse {
    /**
     * @generated from protobuf field: repeated kbar.KBarRow data = 1;
     */
    data: KBarRow[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SymbolList$Type extends MessageType<SymbolList> {
    constructor() {
        super("kbar.SymbolList", [
            { no: 1, name: "data", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SymbolList>): SymbolList {
        const message = { data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SymbolList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SymbolList): SymbolList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string data */ 1:
                    message.data.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SymbolList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string data = 1; */
        for (let i = 0; i < message.data.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.data[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kbar.SymbolList
 */
export const SymbolList = new SymbolList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KBarRequest$Type extends MessageType<KBarRequest> {
    constructor() {
        super("kbar.KBarRequest", [
            { no: 1, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KBarRequest>): KBarRequest {
        const message = { symbol: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KBarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KBarRequest): KBarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string symbol */ 1:
                    message.symbol = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KBarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string symbol = 1; */
        if (message.symbol !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.symbol);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kbar.KBarRequest
 */
export const KBarRequest = new KBarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KBarRow$Type extends MessageType<KBarRow> {
    constructor() {
        super("kbar.KBarRow", [
            { no: 1, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trade_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pre_close", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "open_price", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "hight_price", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "low_price", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "close_price", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "change", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "pct_change", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "volume", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "amount", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<KBarRow>): KBarRow {
        const message = { symbol: "", tradeDate: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KBarRow>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KBarRow): KBarRow {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string symbol */ 1:
                    message.symbol = reader.string();
                    break;
                case /* string trade_date */ 2:
                    message.tradeDate = reader.string();
                    break;
                case /* optional double pre_close */ 3:
                    message.preClose = reader.double();
                    break;
                case /* optional double open_price */ 4:
                    message.openPrice = reader.double();
                    break;
                case /* optional double hight_price */ 5:
                    message.hightPrice = reader.double();
                    break;
                case /* optional double low_price */ 6:
                    message.lowPrice = reader.double();
                    break;
                case /* optional double close_price */ 7:
                    message.closePrice = reader.double();
                    break;
                case /* optional double change */ 8:
                    message.change = reader.double();
                    break;
                case /* optional double pct_change */ 9:
                    message.pctChange = reader.double();
                    break;
                case /* optional double volume */ 10:
                    message.volume = reader.double();
                    break;
                case /* optional double amount */ 11:
                    message.amount = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KBarRow, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string symbol = 1; */
        if (message.symbol !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.symbol);
        /* string trade_date = 2; */
        if (message.tradeDate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tradeDate);
        /* optional double pre_close = 3; */
        if (message.preClose !== undefined)
            writer.tag(3, WireType.Bit64).double(message.preClose);
        /* optional double open_price = 4; */
        if (message.openPrice !== undefined)
            writer.tag(4, WireType.Bit64).double(message.openPrice);
        /* optional double hight_price = 5; */
        if (message.hightPrice !== undefined)
            writer.tag(5, WireType.Bit64).double(message.hightPrice);
        /* optional double low_price = 6; */
        if (message.lowPrice !== undefined)
            writer.tag(6, WireType.Bit64).double(message.lowPrice);
        /* optional double close_price = 7; */
        if (message.closePrice !== undefined)
            writer.tag(7, WireType.Bit64).double(message.closePrice);
        /* optional double change = 8; */
        if (message.change !== undefined)
            writer.tag(8, WireType.Bit64).double(message.change);
        /* optional double pct_change = 9; */
        if (message.pctChange !== undefined)
            writer.tag(9, WireType.Bit64).double(message.pctChange);
        /* optional double volume = 10; */
        if (message.volume !== undefined)
            writer.tag(10, WireType.Bit64).double(message.volume);
        /* optional double amount = 11; */
        if (message.amount !== undefined)
            writer.tag(11, WireType.Bit64).double(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kbar.KBarRow
 */
export const KBarRow = new KBarRow$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KBarResponse$Type extends MessageType<KBarResponse> {
    constructor() {
        super("kbar.KBarResponse", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KBarRow }
        ]);
    }
    create(value?: PartialMessage<KBarResponse>): KBarResponse {
        const message = { data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KBarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KBarResponse): KBarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated kbar.KBarRow data */ 1:
                    message.data.push(KBarRow.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KBarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated kbar.KBarRow data = 1; */
        for (let i = 0; i < message.data.length; i++)
            KBarRow.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kbar.KBarResponse
 */
export const KBarResponse = new KBarResponse$Type();
/**
 * @generated ServiceType for protobuf service kbar.KBar
 */
export const KBar = new ServiceType("kbar.KBar", [
    { name: "GetSymbols", options: {}, I: Empty, O: SymbolList },
    { name: "GetKBar", options: {}, I: KBarRequest, O: KBarResponse }
]);
